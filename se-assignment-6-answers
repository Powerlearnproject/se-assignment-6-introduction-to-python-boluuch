Python Basics
What is Python, and What are Some of Its Key Features?

Python is a high-level, interpreted programming language known for its readability and simplicity. It supports multiple programming paradigms, including procedural, object-oriented, and functional programming. Key features that make Python popular include:

Simple and Readable Syntax: Python's syntax is clear and easy to understand, making it accessible for beginners.
Dynamic Typing: Variables in Python do not need explicit declaration, and types are determined at runtime.
Extensive Standard Library: Python has a vast standard library that supports many common programming tasks.
Interpreted Language: Python code is executed line by line, which simplifies debugging and development.
Cross-Platform: Python can run on various operating systems, including Windows, macOS, and Linux.
Community and Ecosystem: Python has a large community and a rich ecosystem of third-party packages and tools.
Examples of Use Cases:

Web Development: Frameworks like Django and Flask.
Data Science and Machine Learning: Libraries such as NumPy, pandas, and scikit-learn.
Automation and Scripting: Automating repetitive tasks using scripts.
Scientific Computing: Libraries like SciPy and Matplotlib.
Game Development: Libraries like Pygame.
Installing Python
Steps to Install Python:

Download Python:

Visit the official Python website.
Download the installer for your operating system (Windows, macOS, or Linux).
Run the Installer:

On Windows and macOS, run the downloaded installer and follow the prompts.
Ensure you check the box to add Python to your system PATH.
Verify Installation:

Open a terminal (Command Prompt on Windows, Terminal on macOS/Linux).
Type python --version or python3 --version to verify the installation.
Set Up a Virtual Environment:

Create a new directory for your project.
Navigate to the directory in your terminal.
Create a virtual environment:
bash
Copy code
python -m venv venv
Activate the virtual environment:
Windows: venv\Scripts\activate
macOS/Linux: source venv/bin/activate
Python Syntax and Semantics
Hello, World! Program:

python
Copy code
print("Hello, World!")
print: A built-in function to output text to the console.
"Hello, World!": A string literal enclosed in double quotes.
Data Types and Variables
Basic Data Types:

Integers: Whole numbers, e.g., 42.
Floats: Decimal numbers, e.g., 3.14.
Strings: Text data, e.g., "Hello".
Booleans: True or False values, e.g., True.
Script Demonstrating Variables:

python
Copy code
# Integer
age = 25

# Float
height = 5.9

# String
name = "Alice"

# Boolean
is_student = True

print(age, height, name, is_student)
Control Structures
Conditional Statements:

python
Copy code
age = 18
if age >= 18:
    print("You are an adult.")
else:
    print("You are a minor.")
Loops:

python
Copy code
# For loop
for i in range(5):
    print(i)

# While loop
count = 0
while count < 5:
    print(count)
    count += 1
Functions in Python
Functions and Their Usefulness:
Functions encapsulate reusable blocks of code, making programs modular and easier to manage.

Example Function:

python
Copy code
def add(a, b):
    return a + b

# Calling the function
result = add(3, 5)
print(result)
Lists and Dictionaries
Differences:

Lists: Ordered collections of elements. Example: [1, 2, 3, 4, 5]
Dictionaries: Key-value pairs. Example: {"name": "Alice", "age": 25}
Example Script:

python
Copy code
# List
numbers = [1, 2, 3, 4, 5]
print(numbers[0])  # Access first element

# Dictionary
person = {"name": "Alice", "age": 25}
print(person["name"])  # Access value by key
Exception Handling
What is Exception Handling?:
Exception handling manages errors gracefully using try, except, and finally blocks.

Example:

python
Copy code
try:
    result = 10 / 0
except ZeroDivisionError:
    print("Cannot divide by zero!")
finally:
    print("This will always execute.")
Modules and Packages
Concepts of Modules and Packages:

Modules: Single files containing Python code.
Packages: Directories containing multiple modules, along with an __init__.py file.
Importing a Module:

python
Copy code
import math

# Using a function from the math module
print(math.sqrt(16))
File I/O
Reading and Writing Files:

Reading:

python
Copy code
with open('example.txt', 'r') as file:
    content = file.read()
    print(content)
Writing:

python
Copy code
lines = ["First line", "Second line", "Third line"]
with open('output.txt', 'w') as file:
    for line in lines:
        file.write(line + "\n")
